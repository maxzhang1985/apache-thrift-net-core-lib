/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CqlMetadata : TBase
  {

    public Dictionary<byte[], string> Name_types { get; set; }

    public Dictionary<byte[], string> Value_types { get; set; }

    public string Default_name_type { get; set; }

    public string Default_value_type { get; set; }

    public CqlMetadata() {
    }

    public CqlMetadata(Dictionary<byte[], string> name_types, Dictionary<byte[], string> value_types, string default_name_type, string default_value_type) : this() {
      this.Name_types = name_types;
      this.Value_types = value_types;
      this.Default_name_type = default_name_type;
      this.Default_value_type = default_value_type;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name_types = false;
        bool isset_value_types = false;
        bool isset_default_name_type = false;
        bool isset_default_value_type = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Name_types = new Dictionary<byte[], string>();
                  TMap _map69 = iprot.ReadMapBegin();
                  for( int _i70 = 0; _i70 < _map69.Count; ++_i70)
                  {
                    byte[] _key71;
                    string _val72;
                    _key71 = iprot.ReadBinary();
                    _val72 = iprot.ReadString();
                    Name_types[_key71] = _val72;
                  }
                  iprot.ReadMapEnd();
                }
                isset_name_types = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Value_types = new Dictionary<byte[], string>();
                  TMap _map73 = iprot.ReadMapBegin();
                  for( int _i74 = 0; _i74 < _map73.Count; ++_i74)
                  {
                    byte[] _key75;
                    string _val76;
                    _key75 = iprot.ReadBinary();
                    _val76 = iprot.ReadString();
                    Value_types[_key75] = _val76;
                  }
                  iprot.ReadMapEnd();
                }
                isset_value_types = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Default_name_type = iprot.ReadString();
                isset_default_name_type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Default_value_type = iprot.ReadString();
                isset_default_value_type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_name_types)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_value_types)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_default_name_type)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_default_value_type)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CqlMetadata");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "name_types";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Name_types.Count));
          foreach (byte[] _iter77 in Name_types.Keys)
          {
            oprot.WriteBinary(_iter77);
            oprot.WriteString(Name_types[_iter77]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
        field.Name = "value_types";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Value_types.Count));
          foreach (byte[] _iter78 in Value_types.Keys)
          {
            oprot.WriteBinary(_iter78);
            oprot.WriteString(Value_types[_iter78]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
        field.Name = "default_name_type";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Default_name_type);
        oprot.WriteFieldEnd();
        field.Name = "default_value_type";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Default_value_type);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CqlMetadata(");
      __sb.Append(", Name_types: ");
      __sb.Append(Name_types);
      __sb.Append(", Value_types: ");
      __sb.Append(Value_types);
      __sb.Append(", Default_name_type: ");
      __sb.Append(Default_name_type);
      __sb.Append(", Default_value_type: ");
      __sb.Append(Default_value_type);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
