/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra.Test
{

  /// <summary>
  /// Row returned from a CQL query
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CqlRow : TBase
  {

    public byte[] Key { get; set; }

    public List<Column> Columns { get; set; }

    public CqlRow() {
    }

    public CqlRow(byte[] key, List<Column> columns) : this() {
      this.Key = key;
      this.Columns = columns;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_key = false;
        bool isset_columns = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadBinary();
                isset_key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Columns = new List<Column>();
                  TList _list65 = iprot.ReadListBegin();
                  for( int _i66 = 0; _i66 < _list65.Count; ++_i66)
                  {
                    Column _elem67;
                    _elem67 = new Column();
                    _elem67.Read(iprot);
                    Columns.Add(_elem67);
                  }
                  iprot.ReadListEnd();
                }
                isset_columns = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_key)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_columns)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CqlRow");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "key";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Key);
        oprot.WriteFieldEnd();
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
          foreach (Column _iter68 in Columns)
          {
            _iter68.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CqlRow(");
      __sb.Append(", Key: ");
      __sb.Append(Key);
      __sb.Append(", Columns: ");
      __sb.Append(Columns);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
