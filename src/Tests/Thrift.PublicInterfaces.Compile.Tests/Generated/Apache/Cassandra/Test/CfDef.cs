/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class CfDef : TBase
  {
    private string _column_type;
    private string _comparator_type;
    private string _subcomparator_type;
    private string _comment;
    private double _read_repair_chance;
    private List<ColumnDef> _column_metadata;
    private int _gc_grace_seconds;
    private string _default_validation_class;
    private int _id;
    private int _min_compaction_threshold;
    private int _max_compaction_threshold;
    private bool _replicate_on_write;
    private double _merge_shards_chance;
    private string _key_validation_class;
    private byte[] _key_alias;
    private string _compaction_strategy;
    private Dictionary<string, string> _compaction_strategy_options;
    private Dictionary<string, string> _compression_options;
    private double _bloom_filter_fp_chance;

    [DataMember(Order = 0)]
    public string Keyspace { get; set; }

    [DataMember(Order = 0)]
    public string Name { get; set; }

    [DataMember(Order = 0)]
    public string Column_type
    {
      get
      {
        return _column_type;
      }
      set
      {
        __isset.column_type = true;
        this._column_type = value;
      }
    }

    [DataMember(Order = 0)]
    public string Comparator_type
    {
      get
      {
        return _comparator_type;
      }
      set
      {
        __isset.comparator_type = true;
        this._comparator_type = value;
      }
    }

    [DataMember(Order = 0)]
    public string Subcomparator_type
    {
      get
      {
        return _subcomparator_type;
      }
      set
      {
        __isset.subcomparator_type = true;
        this._subcomparator_type = value;
      }
    }

    [DataMember(Order = 0)]
    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }

    [DataMember(Order = 0)]
    public double Read_repair_chance
    {
      get
      {
        return _read_repair_chance;
      }
      set
      {
        __isset.read_repair_chance = true;
        this._read_repair_chance = value;
      }
    }

    [DataMember(Order = 0)]
    public List<ColumnDef> Column_metadata
    {
      get
      {
        return _column_metadata;
      }
      set
      {
        __isset.column_metadata = true;
        this._column_metadata = value;
      }
    }

    [DataMember(Order = 0)]
    public int Gc_grace_seconds
    {
      get
      {
        return _gc_grace_seconds;
      }
      set
      {
        __isset.gc_grace_seconds = true;
        this._gc_grace_seconds = value;
      }
    }

    [DataMember(Order = 0)]
    public string Default_validation_class
    {
      get
      {
        return _default_validation_class;
      }
      set
      {
        __isset.default_validation_class = true;
        this._default_validation_class = value;
      }
    }

    [DataMember(Order = 0)]
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    [DataMember(Order = 0)]
    public int Min_compaction_threshold
    {
      get
      {
        return _min_compaction_threshold;
      }
      set
      {
        __isset.min_compaction_threshold = true;
        this._min_compaction_threshold = value;
      }
    }

    [DataMember(Order = 0)]
    public int Max_compaction_threshold
    {
      get
      {
        return _max_compaction_threshold;
      }
      set
      {
        __isset.max_compaction_threshold = true;
        this._max_compaction_threshold = value;
      }
    }

    [DataMember(Order = 0)]
    public bool Replicate_on_write
    {
      get
      {
        return _replicate_on_write;
      }
      set
      {
        __isset.replicate_on_write = true;
        this._replicate_on_write = value;
      }
    }

    [DataMember(Order = 0)]
    public double Merge_shards_chance
    {
      get
      {
        return _merge_shards_chance;
      }
      set
      {
        __isset.merge_shards_chance = true;
        this._merge_shards_chance = value;
      }
    }

    [DataMember(Order = 0)]
    public string Key_validation_class
    {
      get
      {
        return _key_validation_class;
      }
      set
      {
        __isset.key_validation_class = true;
        this._key_validation_class = value;
      }
    }

    [DataMember(Order = 0)]
    public byte[] Key_alias
    {
      get
      {
        return _key_alias;
      }
      set
      {
        __isset.key_alias = true;
        this._key_alias = value;
      }
    }

    [DataMember(Order = 0)]
    public string Compaction_strategy
    {
      get
      {
        return _compaction_strategy;
      }
      set
      {
        __isset.compaction_strategy = true;
        this._compaction_strategy = value;
      }
    }

    [DataMember(Order = 0)]
    public Dictionary<string, string> Compaction_strategy_options
    {
      get
      {
        return _compaction_strategy_options;
      }
      set
      {
        __isset.compaction_strategy_options = true;
        this._compaction_strategy_options = value;
      }
    }

    [DataMember(Order = 0)]
    public Dictionary<string, string> Compression_options
    {
      get
      {
        return _compression_options;
      }
      set
      {
        __isset.compression_options = true;
        this._compression_options = value;
      }
    }

    [DataMember(Order = 0)]
    public double Bloom_filter_fp_chance
    {
      get
      {
        return _bloom_filter_fp_chance;
      }
      set
      {
        __isset.bloom_filter_fp_chance = true;
        this._bloom_filter_fp_chance = value;
      }
    }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool column_type;
      [DataMember]
      public bool comparator_type;
      [DataMember]
      public bool subcomparator_type;
      [DataMember]
      public bool comment;
      [DataMember]
      public bool read_repair_chance;
      [DataMember]
      public bool column_metadata;
      [DataMember]
      public bool gc_grace_seconds;
      [DataMember]
      public bool default_validation_class;
      [DataMember]
      public bool id;
      [DataMember]
      public bool min_compaction_threshold;
      [DataMember]
      public bool max_compaction_threshold;
      [DataMember]
      public bool replicate_on_write;
      [DataMember]
      public bool merge_shards_chance;
      [DataMember]
      public bool key_validation_class;
      [DataMember]
      public bool key_alias;
      [DataMember]
      public bool compaction_strategy;
      [DataMember]
      public bool compaction_strategy_options;
      [DataMember]
      public bool compression_options;
      [DataMember]
      public bool bloom_filter_fp_chance;
    }

    #region XmlSerializer support

    public bool ShouldSerializeColumn_type()
    {
      return __isset.column_type;
    }

    public bool ShouldSerializeComparator_type()
    {
      return __isset.comparator_type;
    }

    public bool ShouldSerializeSubcomparator_type()
    {
      return __isset.subcomparator_type;
    }

    public bool ShouldSerializeComment()
    {
      return __isset.comment;
    }

    public bool ShouldSerializeRead_repair_chance()
    {
      return __isset.read_repair_chance;
    }

    public bool ShouldSerializeColumn_metadata()
    {
      return __isset.column_metadata;
    }

    public bool ShouldSerializeGc_grace_seconds()
    {
      return __isset.gc_grace_seconds;
    }

    public bool ShouldSerializeDefault_validation_class()
    {
      return __isset.default_validation_class;
    }

    public bool ShouldSerializeId()
    {
      return __isset.id;
    }

    public bool ShouldSerializeMin_compaction_threshold()
    {
      return __isset.min_compaction_threshold;
    }

    public bool ShouldSerializeMax_compaction_threshold()
    {
      return __isset.max_compaction_threshold;
    }

    public bool ShouldSerializeReplicate_on_write()
    {
      return __isset.replicate_on_write;
    }

    public bool ShouldSerializeMerge_shards_chance()
    {
      return __isset.merge_shards_chance;
    }

    public bool ShouldSerializeKey_validation_class()
    {
      return __isset.key_validation_class;
    }

    public bool ShouldSerializeKey_alias()
    {
      return __isset.key_alias;
    }

    public bool ShouldSerializeCompaction_strategy()
    {
      return __isset.compaction_strategy;
    }

    public bool ShouldSerializeCompaction_strategy_options()
    {
      return __isset.compaction_strategy_options;
    }

    public bool ShouldSerializeCompression_options()
    {
      return __isset.compression_options;
    }

    public bool ShouldSerializeBloom_filter_fp_chance()
    {
      return __isset.bloom_filter_fp_chance;
    }

    #endregion XmlSerializer support

    public CfDef() {
      this._column_type = "Standard";
      this.__isset.column_type = true;
      this._comparator_type = "BytesType";
      this.__isset.comparator_type = true;
      this._read_repair_chance = 1;
      this.__isset.read_repair_chance = true;
    }

    public CfDef(string keyspace, string name) : this() {
      this.Keyspace = keyspace;
      this.Name = name;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_keyspace = false;
        bool isset_name = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Keyspace = iprot.ReadString();
                isset_keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Column_type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Comparator_type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Subcomparator_type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Double) {
                Read_repair_chance = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  Column_metadata = new List<ColumnDef>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    ColumnDef _elem44;
                    _elem44 = new ColumnDef();
                    _elem44.Read(iprot);
                    Column_metadata.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                Gc_grace_seconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                Default_validation_class = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I32) {
                Min_compaction_threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I32) {
                Max_compaction_threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Bool) {
                Replicate_on_write = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.Double) {
                Merge_shards_chance = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.String) {
                Key_validation_class = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.String) {
                Key_alias = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.String) {
                Compaction_strategy = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.Map) {
                {
                  Compaction_strategy_options = new Dictionary<string, string>();
                  TMap _map45 = iprot.ReadMapBegin();
                  for( int _i46 = 0; _i46 < _map45.Count; ++_i46)
                  {
                    string _key47;
                    string _val48;
                    _key47 = iprot.ReadString();
                    _val48 = iprot.ReadString();
                    Compaction_strategy_options[_key47] = _val48;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 32:
              if (field.Type == TType.Map) {
                {
                  Compression_options = new Dictionary<string, string>();
                  TMap _map49 = iprot.ReadMapBegin();
                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)
                  {
                    string _key51;
                    string _val52;
                    _key51 = iprot.ReadString();
                    _val52 = iprot.ReadString();
                    Compression_options[_key51] = _val52;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 33:
              if (field.Type == TType.Double) {
                Bloom_filter_fp_chance = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_keyspace)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_name)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CfDef");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "keyspace";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Keyspace);
        oprot.WriteFieldEnd();
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (Column_type != null && __isset.column_type) {
          field.Name = "column_type";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Column_type);
          oprot.WriteFieldEnd();
        }
        if (Comparator_type != null && __isset.comparator_type) {
          field.Name = "comparator_type";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Comparator_type);
          oprot.WriteFieldEnd();
        }
        if (Subcomparator_type != null && __isset.subcomparator_type) {
          field.Name = "subcomparator_type";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Subcomparator_type);
          oprot.WriteFieldEnd();
        }
        if (Comment != null && __isset.comment) {
          field.Name = "comment";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Comment);
          oprot.WriteFieldEnd();
        }
        if (__isset.read_repair_chance) {
          field.Name = "read_repair_chance";
          field.Type = TType.Double;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Read_repair_chance);
          oprot.WriteFieldEnd();
        }
        if (Column_metadata != null && __isset.column_metadata) {
          field.Name = "column_metadata";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Column_metadata.Count));
            foreach (ColumnDef _iter53 in Column_metadata)
            {
              _iter53.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.gc_grace_seconds) {
          field.Name = "gc_grace_seconds";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gc_grace_seconds);
          oprot.WriteFieldEnd();
        }
        if (Default_validation_class != null && __isset.default_validation_class) {
          field.Name = "default_validation_class";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Default_validation_class);
          oprot.WriteFieldEnd();
        }
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (__isset.min_compaction_threshold) {
          field.Name = "min_compaction_threshold";
          field.Type = TType.I32;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Min_compaction_threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.max_compaction_threshold) {
          field.Name = "max_compaction_threshold";
          field.Type = TType.I32;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Max_compaction_threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.replicate_on_write) {
          field.Name = "replicate_on_write";
          field.Type = TType.Bool;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Replicate_on_write);
          oprot.WriteFieldEnd();
        }
        if (__isset.merge_shards_chance) {
          field.Name = "merge_shards_chance";
          field.Type = TType.Double;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Merge_shards_chance);
          oprot.WriteFieldEnd();
        }
        if (Key_validation_class != null && __isset.key_validation_class) {
          field.Name = "key_validation_class";
          field.Type = TType.String;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key_validation_class);
          oprot.WriteFieldEnd();
        }
        if (Key_alias != null && __isset.key_alias) {
          field.Name = "key_alias";
          field.Type = TType.String;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Key_alias);
          oprot.WriteFieldEnd();
        }
        if (Compaction_strategy != null && __isset.compaction_strategy) {
          field.Name = "compaction_strategy";
          field.Type = TType.String;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Compaction_strategy);
          oprot.WriteFieldEnd();
        }
        if (Compaction_strategy_options != null && __isset.compaction_strategy_options) {
          field.Name = "compaction_strategy_options";
          field.Type = TType.Map;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Compaction_strategy_options.Count));
            foreach (string _iter54 in Compaction_strategy_options.Keys)
            {
              oprot.WriteString(_iter54);
              oprot.WriteString(Compaction_strategy_options[_iter54]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Compression_options != null && __isset.compression_options) {
          field.Name = "compression_options";
          field.Type = TType.Map;
          field.ID = 32;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Compression_options.Count));
            foreach (string _iter55 in Compression_options.Keys)
            {
              oprot.WriteString(_iter55);
              oprot.WriteString(Compression_options[_iter55]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.bloom_filter_fp_chance) {
          field.Name = "bloom_filter_fp_chance";
          field.Type = TType.Double;
          field.ID = 33;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Bloom_filter_fp_chance);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CfDef(");
      __sb.Append(", Keyspace: ");
      __sb.Append(Keyspace);
      __sb.Append(", Name: ");
      __sb.Append(Name);
      if (Column_type != null && __isset.column_type) {
        __sb.Append(", Column_type: ");
        __sb.Append(Column_type);
      }
      if (Comparator_type != null && __isset.comparator_type) {
        __sb.Append(", Comparator_type: ");
        __sb.Append(Comparator_type);
      }
      if (Subcomparator_type != null && __isset.subcomparator_type) {
        __sb.Append(", Subcomparator_type: ");
        __sb.Append(Subcomparator_type);
      }
      if (Comment != null && __isset.comment) {
        __sb.Append(", Comment: ");
        __sb.Append(Comment);
      }
      if (__isset.read_repair_chance) {
        __sb.Append(", Read_repair_chance: ");
        __sb.Append(Read_repair_chance);
      }
      if (Column_metadata != null && __isset.column_metadata) {
        __sb.Append(", Column_metadata: ");
        __sb.Append(Column_metadata);
      }
      if (__isset.gc_grace_seconds) {
        __sb.Append(", Gc_grace_seconds: ");
        __sb.Append(Gc_grace_seconds);
      }
      if (Default_validation_class != null && __isset.default_validation_class) {
        __sb.Append(", Default_validation_class: ");
        __sb.Append(Default_validation_class);
      }
      if (__isset.id) {
        __sb.Append(", Id: ");
        __sb.Append(Id);
      }
      if (__isset.min_compaction_threshold) {
        __sb.Append(", Min_compaction_threshold: ");
        __sb.Append(Min_compaction_threshold);
      }
      if (__isset.max_compaction_threshold) {
        __sb.Append(", Max_compaction_threshold: ");
        __sb.Append(Max_compaction_threshold);
      }
      if (__isset.replicate_on_write) {
        __sb.Append(", Replicate_on_write: ");
        __sb.Append(Replicate_on_write);
      }
      if (__isset.merge_shards_chance) {
        __sb.Append(", Merge_shards_chance: ");
        __sb.Append(Merge_shards_chance);
      }
      if (Key_validation_class != null && __isset.key_validation_class) {
        __sb.Append(", Key_validation_class: ");
        __sb.Append(Key_validation_class);
      }
      if (Key_alias != null && __isset.key_alias) {
        __sb.Append(", Key_alias: ");
        __sb.Append(Key_alias);
      }
      if (Compaction_strategy != null && __isset.compaction_strategy) {
        __sb.Append(", Compaction_strategy: ");
        __sb.Append(Compaction_strategy);
      }
      if (Compaction_strategy_options != null && __isset.compaction_strategy_options) {
        __sb.Append(", Compaction_strategy_options: ");
        __sb.Append(Compaction_strategy_options);
      }
      if (Compression_options != null && __isset.compression_options) {
        __sb.Append(", Compression_options: ");
        __sb.Append(Compression_options);
      }
      if (__isset.bloom_filter_fp_chance) {
        __sb.Append(", Bloom_filter_fp_chance: ");
        __sb.Append(Bloom_filter_fp_chance);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
