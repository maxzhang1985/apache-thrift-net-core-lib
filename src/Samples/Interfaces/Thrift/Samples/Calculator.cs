/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Samples
{
  public partial class Calculator {
    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface ISync : Thrift.Samples.SharedService.ISync {
      /// <summary>
      /// A method definition looks like C code. It has a return type, arguments,
      /// and optionally a list of exceptions that it may throw. Note that argument
      /// lists and exception lists are specified using the exact same syntax as
      /// field lists in struct or exception definitions.
      /// </summary>
      void Ping();
      int @Add(int num1, int num2);
      int Calculate(int logid, Work w);
      /// <summary>
      /// This method has a oneway modifier. That means the client only makes
      /// a request and does not listen for any response at all. Oneway methods
      /// must be void.
      /// </summary>
      void Zip();
    }

    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface IAsync : Thrift.Samples.SharedService.IAsync {
      /// <summary>
      /// A method definition looks like C code. It has a return type, arguments,
      /// and optionally a list of exceptions that it may throw. Note that argument
      /// lists and exception lists are specified using the exact same syntax as
      /// field lists in struct or exception definitions.
      /// </summary>
      Task PingAsync();
      Task<int> @AddAsync(int num1, int num2);
      Task<int> CalculateAsync(int logid, Work w);
      /// <summary>
      /// This method has a oneway modifier. That means the client only makes
      /// a request and does not listen for any response at all. Oneway methods
      /// must be void.
      /// </summary>
      Task ZipAsync();
    }

    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface Iface : ISync, IAsync {
      /// <summary>
      /// A method definition looks like C code. It has a return type, arguments,
      /// and optionally a list of exceptions that it may throw. Note that argument
      /// lists and exception lists are specified using the exact same syntax as
      /// field lists in struct or exception definitions.
      /// </summary>
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      void End_Ping(IAsyncResult asyncResult);
      IAsyncResult Begin_Add(AsyncCallback callback, object state, int num1, int num2);
      int End_Add(IAsyncResult asyncResult);
      IAsyncResult Begin_Calculate(AsyncCallback callback, object state, int logid, Work w);
      int End_Calculate(IAsyncResult asyncResult);
      /// <summary>
      /// This method has a oneway modifier. That means the client only makes
      /// a request and does not listen for any response at all. Oneway methods
      /// must be void.
      /// </summary>
      IAsyncResult Begin_Zip(AsyncCallback callback, object state);
      void End_Zip(IAsyncResult asyncResult);
    }

    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public class Client : Thrift.Samples.SharedService.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public void End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Ping();
      }

      public async Task PingAsync()
      {
        await Task.Run(() =>
        {
          Ping();
        });
      }

      /// <summary>
      /// A method definition looks like C code. It has a return type, arguments,
      /// and optionally a list of exceptions that it may throw. Note that argument
      /// lists and exception lists are specified using the exact same syntax as
      /// field lists in struct or exception definitions.
      /// </summary>
      public void Ping()
      {
        var asyncResult = Begin_Ping(null, null);
        End_Ping(asyncResult);

      }
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      public IAsyncResult Begin_Add(AsyncCallback callback, object state, int num1, int num2)
      {
        return send_Add(callback, state, num1, num2);
      }

      public int End_Add(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Add();
      }

      public async Task<int> @AddAsync(int num1, int num2)
      {
        int retval;
        retval = await Task.Run(() =>
        {
          return Add(num1, num2);
        });
        return retval;
      }

      public int @Add(int num1, int num2)
      {
        var asyncResult = Begin_Add(null, null, num1, num2);
        return End_Add(asyncResult);

      }
      public IAsyncResult send_Add(AsyncCallback callback, object state, int num1, int num2)
      {
        oprot_.WriteMessageBegin(new TMessage("Add", TMessageType.Call, seqid_));
        Add_args args = new Add_args();
        args.Num1 = num1;
        args.Num2 = num2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public int recv_Add()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Add_result result = new Add_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Add failed: unknown result");
      }

      
      public IAsyncResult Begin_Calculate(AsyncCallback callback, object state, int logid, Work w)
      {
        return send_Calculate(callback, state, logid, w);
      }

      public int End_Calculate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Calculate();
      }

      public async Task<int> CalculateAsync(int logid, Work w)
      {
        int retval;
        retval = await Task.Run(() =>
        {
          return Calculate(logid, w);
        });
        return retval;
      }

      public int Calculate(int logid, Work w)
      {
        var asyncResult = Begin_Calculate(null, null, logid, w);
        return End_Calculate(asyncResult);

      }
      public IAsyncResult send_Calculate(AsyncCallback callback, object state, int logid, Work w)
      {
        oprot_.WriteMessageBegin(new TMessage("Calculate", TMessageType.Call, seqid_));
        Calculate_args args = new Calculate_args();
        args.Logid = logid;
        args.W = w;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public int recv_Calculate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Calculate_result result = new Calculate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ouch) {
          throw result.Ouch;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Calculate failed: unknown result");
      }

      
      public IAsyncResult Begin_Zip(AsyncCallback callback, object state)
      {
        return send_Zip(callback, state);
      }

      public void End_Zip(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task ZipAsync()
      {
        await Task.Run(() =>
        {
          Zip();
        });
      }

      /// <summary>
      /// This method has a oneway modifier. That means the client only makes
      /// a request and does not listen for any response at all. Oneway methods
      /// must be void.
      /// </summary>
      public void Zip()
      {
        var asyncResult = Begin_Zip(null, null);

      }
      public IAsyncResult send_Zip(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("Zip", TMessageType.Oneway, seqid_));
        Zip_args args = new Zip_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

    }

      //TODO: check for generation of AsyncProcessor from Sync version of processor
      public class AsyncProcessor : Thrift.Samples.SharedService.AsyncProcessor, TAsyncProcessor {
      public AsyncProcessor(IAsync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["Add"] = Add_ProcessAsync;
        processMap_["Calculate"] = Calculate_ProcessAsync;
        processMap_["Zip"] = Zip_ProcessAsync;
      }

      private IAsync iface_;

      public new async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          await fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public async Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        try
        {
          await iface_.PingAsync();
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public async Task Add_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Add_args args = new Add_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Add_result result = new Add_result();
        try
        {
          result.Success = await iface_.@AddAsync(args.Num1, args.Num2);
          oprot.WriteMessageBegin(new TMessage("Add", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Add", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public async Task Calculate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Calculate_args args = new Calculate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Calculate_result result = new Calculate_result();
        try
        {
          try
          {
            result.Success = await iface_.CalculateAsync(args.Logid, args.W);
          }
          catch (InvalidOperation ouch)
          {
            result.Ouch = ouch;
          }
          oprot.WriteMessageBegin(new TMessage("Calculate", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Calculate", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public async Task Zip_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Zip_args args = new Zip_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        try
        {
          await iface_.ZipAsync();
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
        }
      }

    }

    public class Processor : Thrift.Samples.SharedService.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["Add"] = Add_Process;
        processMap_["Calculate"] = Calculate_Process;
        processMap_["Zip"] = Zip_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        try
        {
          iface_.Ping();
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Add_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Add_args args = new Add_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Add_result result = new Add_result();
        try
        {
          result.Success = iface_.@Add(args.Num1, args.Num2);
          oprot.WriteMessageBegin(new TMessage("Add", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Add", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Calculate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Calculate_args args = new Calculate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Calculate_result result = new Calculate_result();
        try
        {
          try
          {
            result.Success = iface_.Calculate(args.Logid, args.W);
          }
          catch (InvalidOperation ouch)
          {
            result.Ouch = ouch;
          }
          oprot.WriteMessageBegin(new TMessage("Calculate", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Calculate", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Zip_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Zip_args args = new Zip_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        try
        {
          iface_.Zip();
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
        }
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ping_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ping_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Add_args : TBase
    {
      private int _num1;
      private int _num2;

      public int Num1
      {
        get
        {
          return _num1;
        }
        set
        {
          __isset.num1 = true;
          this._num1 = value;
        }
      }

      public int Num2
      {
        get
        {
          return _num2;
        }
        set
        {
          __isset.num2 = true;
          this._num2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool num1;
        public bool num2;
      }

      public Add_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Num1 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Num2 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Add_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.num1) {
            field.Name = "num1";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Num1);
            oprot.WriteFieldEnd();
          }
          if (__isset.num2) {
            field.Name = "num2";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Num2);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Add_args(");
        bool __first = true;
        if (__isset.num1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Num1: ");
          __sb.Append(Num1);
        }
        if (__isset.num2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Num2: ");
          __sb.Append(Num2);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Add_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Add_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Add_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Add_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Calculate_args : TBase
    {
      private int _logid;
      private Work _w;

      public int Logid
      {
        get
        {
          return _logid;
        }
        set
        {
          __isset.logid = true;
          this._logid = value;
        }
      }

      public Work W
      {
        get
        {
          return _w;
        }
        set
        {
          __isset.w = true;
          this._w = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool logid;
        public bool w;
      }

      public Calculate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Logid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  W = new Work();
                  W.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Calculate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.logid) {
            field.Name = "logid";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Logid);
            oprot.WriteFieldEnd();
          }
          if (W != null && __isset.w) {
            field.Name = "w";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            W.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Calculate_args(");
        bool __first = true;
        if (__isset.logid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Logid: ");
          __sb.Append(Logid);
        }
        if (W != null && __isset.w) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("W: ");
          __sb.Append(W== null ? "<null>" : W.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Calculate_result : TBase
    {
      private int _success;
      private InvalidOperation _ouch;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Ouch
      {
        get
        {
          return _ouch;
        }
        set
        {
          __isset.ouch = true;
          this._ouch = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ouch;
      }

      public Calculate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Ouch = new InvalidOperation();
                  Ouch.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Calculate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.ouch) {
            if (Ouch != null) {
              field.Name = "Ouch";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Ouch.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Calculate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Ouch != null && __isset.ouch) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ouch: ");
          __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Zip_args : TBase
    {

      public Zip_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Zip_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Zip_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
